#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     rightFront,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     leftFront,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C1_1,     rightBack,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C1_2,     leftBack,      tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C2_1,    frontRS,              tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    backRS,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_1,    frontLS,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_2,    backLS,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_3,    servo9,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_4,    servo10,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_5,    servo11,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_6,    servo12,              tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.


void initializeRobot()
{
	servo[frontRS]= 90;
	servo[backRS]= 90;
	servo[frontLS]= 90;
	servo[backLS]= 90;
	return;
}

void Rightside(int value)
{
	motor[rightFront]= value;
	motor[rightBack]= value;
}

void Leftside(int value1)
{
	motor[leftFront]= value1;
	motor[leftBack]= value1;
}

task main()
{
	initializeRobot();
	int frontRServ = 120;
	int threshold = 30;
	int xthreshold = 90;
	waitForStart();   // wait for start of tele-op phase

	while (true)
	{
		getJoystickSettings(joystick);  // Update Buttons and Joysticks
		if (abs(joystick.joy1_y1) > threshold)
			{
			Rightside(joystick.joy1_y1);
			}
		else
			{
				Rightside(0);
			}
		if (abs(joystick.joy1_y2) > threshold)
				{
					Leftside(joystick.joy1_y2);
				}
		else
		{ 
			Leftside(0);
		}
		wait1Msec(20);
		writeDebugStreamLine("%d", motor[rightFront], motor[rightBack], motor[leftFront], motor[leftBack]);
	}
}
