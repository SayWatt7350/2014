#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S3,     colorPort,      sensorCOLORFULL)
#pragma config(Sensor, S4,     HTIRS2,         sensorI2CCustom)
#pragma config(Motor,  mtr_S1_C1_1,     RightFront,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     RightBack,     tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S2_C1_1,     LeftFront,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C1_2,     LeftBack,      tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_3,    lift,                 tServoStandard)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_1,    servo7,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_2,    servo8,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_3,    servo9,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_4,    servo10,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_5,    servo11,              tServoNone)
#pragma config(Servo,  srvo_S2_C2_6,    servo12,              tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "hitechnic-irseeker-v2.h";				//3rd party driver for the ir sensor
#include "joystickdriver.c"

//variable section
const int COLOR_COUNT = 15;			//the amount of colors we have
int speed = 50;									//default motor speed
int fullspeed = 100;						//motor speed variables
int position = 2;								//position of centerpiece. can be 1, 2, or 3
//function section

unsigned long thediff=0;		//the difference between two values given to the function "difference"
void difference(long r1, long g1, long b1, long r2, long g2, long b2)
{
	long r = r1 - r2;		//differences between database value and the scanned value
	long g = g1 - g2;
	long b = b1 - b2;

	thediff =sqrt(r^2+g^2+b^2);
}

void turnRight90()		//turn 90 degrees left
{
	int speed=50;
	int threshold=1440*3*PI/4;

	nMotorEncoder[RightBack] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftBack] = 0;
	nMotorEncoder[LeftFront] = 0;
	while(nMotorEncoder[RightBack] > -threshold && nMotorEncoder[LeftFront] < threshold)
	{
		motor[RightFront] = -speed;
		motor[RightBack] = -speed;
		motor[LeftFront] = speed;
		motor[LeftBack] = speed;
	}
	motor[RightFront] = 0;
	motor[RightBack] = 0;
	motor[LeftFront] = 0;
	motor[LeftBack] = 0;


}

void turnLeft45()		//turn 45 degrees right
{
	int speed=50;
	int threshold=1440*3*PI/8;

	nMotorEncoder[RightBack] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftBack] = 0;
	nMotorEncoder[LeftFront] = 0;
	while(nMotorEncoder[RightBack] < threshold && nMotorEncoder[LeftFront] > -threshold)
	{
		motor[RightFront] = speed;
		motor[RightBack] = speed;
		motor[LeftFront] = -speed;
		motor[LeftBack] = -speed;
	}
	motor[RightFront] = 0;
	motor[RightBack] = 0;
	motor[LeftFront] = 0;
	motor[LeftBack] = 0;


}

void turnLeft90()		//turn 90 degrees right
{
	int speed=50;
	int threshold=1440*3*PI/4;

	nMotorEncoder[RightBack] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftBack] = 0;
	nMotorEncoder[LeftFront] = 0;
	while(nMotorEncoder[RightBack] < threshold && nMotorEncoder[LeftFront] > -threshold)
	{
		motor[RightFront] = speed;
		motor[RightBack] = speed;
		motor[LeftFront] = -speed;
		motor[LeftBack] = -speed;
	}
	motor[RightFront] = 0;
	motor[RightBack] = 0;
	motor[LeftFront] = 0;
	motor[LeftBack] = 0;
}

void turnRight45()		//turn 45 degrees right
{
	int speed=50;
	int threshold=1440*3*PI/8;

	nMotorEncoder[RightBack] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftBack] = 0;
	nMotorEncoder[LeftFront] = 0;
	while(nMotorEncoder[RightBack] > -threshold && nMotorEncoder[LeftFront] < threshold)
	{
		motor[RightFront] = -speed;
		motor[RightBack] = -speed;
		motor[LeftFront] = speed;
		motor[LeftBack] = speed;
	}
	motor[RightFront] = 0;
	motor[RightBack] = 0;
	motor[LeftFront] = 0;
	motor[LeftBack] = 0;


}

int gostraight(int distance)		//go forward a certain distance
{
	int speed=50;
	int threshold=1440*3*PI*distance;		//distance in inches? or centimeters?

	nMotorEncoder[RightBack] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftBack] = 0;
	nMotorEncoder[LeftFront] = 0;
	while(nMotorEncoder[RightFront] < threshold)
	{
		motor[RightFront] = speed;
		motor[RightBack] = speed;
		motor[LeftFront] = -speed;
		motor[LeftBack] = -speed;
	}
	motor[RightFront] = 0;
	motor[RightBack] = 0;
	motor[LeftFront] = 0;
	motor[LeftBack] = 0;

	return 0;

}

void senseIR()														//finds the ir
{

												
	int acS1, acS2, acS3, acS4, acS5;				//irsensor values
	int irthreshold=58.5;										//to decide if position 3 or something else
	int irthreshold2=10;										//to decide if position 2 or 1

	motor[RightFront] = speed;							//get off the ramp
	motor[RightBack] = speed;
	motor[LeftFront] = speed;
	motor[LeftBack] = speed;
	wait1Msec(2600);

	HTIRS2readAllACStrength(HTIRS2, acS1, acS2, acS3, acS4, acS5);		//used to get ir sensor values

	if(acS4>irthreshold)		//finding position of centerpiece
	{
		position=3;
	}
	else if(acS4>irthreshold2)
	{
		position=2;
	}
	else
	{
		position=1;
	}
}
	void scoring()		// scores a ball in any postion it is in
	{
		if(position == 1) // position 1
		{
				turnLeft45();	
				
				turnRight45();
				
				turnLeft90();
		}
	
		if(position == 2)		//position 2
		{
				turnLeft45();	
				
				turnRight90();
				
				turnLeft90();
		}
	
		else if(position == 3)		//position 3
		{
			turnLeft45();
			
			turnRight45();
			
			turnRight90();
			
			turnLeft90();									
		}
	}


task main()
{



}
